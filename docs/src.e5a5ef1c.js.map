{"version":3,"sources":["src/emoji.struct.js","src/view.js","src/index.js"],"names":["emojis","money","String","fromCodePoint","poop","View","rootElementID","app","document","getElementById","door1","querySelector","door2","door3","winsText","losesText","ratio","updateWins","updateLoses","updateRatio","doorsArray","innerHTML","nextElementSibling","style","animation","num","doorNum","door","filter","innerText","Game","DOMElement","mode","doors","wins","loses","numOfGamesPlayed","alwaysSwitch","firstDoorSelected","doorShown","finalDoorSelected","prizeArray","view","setDoorPrizes","render","selectFirstDoor","window","safeToStart","closeAllDoors","_shufflePrizes","slice","currentIndex","temporaryValue","randomIndex","length","Math","floor","random","highlightSelectedDoor","selectSecondDoor","i","openDoor","setTimeout","switchDoors","keepSelectedDoor","unhighlightAllDoors","doorOptions","splice","indexOf","checkWin","win","lose","calculateWinRatio","resetGame","toFixed","onload","addEventListener","gameAlwaysSwitch","gameNeverSwitch","init","alert","startGames"],"mappings":"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","file":"src.e5a5ef1c.js","sourceRoot":"..","sourcesContent":["const emojis = {\n    money: String.fromCodePoint(0x1F4b0),\n    poop: String.fromCodePoint(0x1F4a9)\n}\n\nexport default emojis;","export class View {\n    constructor(rootElementID){\n        this.app = document.getElementById(rootElementID);\n        \n        this.door1 = this.app.querySelector('.prize-one');\n        this.door2 = this.app.querySelector('.prize-two');\n        this.door3 = this.app.querySelector('.prize-three');\n        this.winsText = this.app.querySelector('#wins');\n        this.losesText = this.app.querySelector('#loses');\n        this.ratio = this.app.querySelector('#ratio');\n\n        this.updateWins(0);\n        this.updateLoses(0);\n        this.updateRatio(0);\n    }\n\n    render(doorsArray){\n        this.door1.innerHTML = doorsArray[0];\n        this.door2.innerHTML = doorsArray[1];\n        this.door3.innerHTML = doorsArray[2];\n    }\n\n    closeAllDoors(){\n        this.door1.nextElementSibling.style.animation = 'closeDoor 300ms forwards';\n        this.door2.nextElementSibling.style.animation = 'closeDoor 300ms forwards';\n        this.door3.nextElementSibling.style.animation = 'closeDoor 300ms forwards';\n    }\n\n    openDoor(num){\n        const doorNum = `door${num+1}`;\n        this[doorNum].nextElementSibling.style.animation = 'openDoor 300ms forwards';\n    }\n\n    closeDoor(num){\n        const doorNum = `door${num+1}`;\n        this[doorNum].nextElementSibling.style.animation = 'closeDoor 300ms forwards';\n    }\n\n    highlightSelectedDoor(door){\n        this[`door${door + 1}`].nextElementSibling.style.filter = 'hue-rotate(45deg)';\n    }\n\n    unhighlightAllDoors(){\n        this.door1.nextElementSibling.style.filter = 'hue-rotate(0deg)';\n        this.door2.nextElementSibling.style.filter = 'hue-rotate(0deg)';\n        this.door3.nextElementSibling.style.filter = 'hue-rotate(0deg)';\n    }\n\n    updateWins(num){\n        this.winsText.innerText = num;\n    }\n\n    updateLoses(num){\n        this.losesText.innerText = num;\n    }\n\n    updateRatio(ratio){\n        this.ratio.innerText = ratio;\n    }\n\n}","import './main.css';\nimport emojis from './emoji.struct';\nimport { View } from './view';\n\nclass Game{\n    // DOMElement is parent node of game HTML\n    // Mode is set to true to always switch doors, false to always keep selected door\n    constructor(DOMElement, mode){\n        this.doors = [];\n        this.wins = 0;\n        this.loses = 0;\n        this.numOfGamesPlayed = 0;\n        this.alwaysSwitch = mode;\n        \n        this.firstDoorSelected = null;\n        this.doorShown = null;\n        this.finalDoorSelected = null;\n        \n        this.prizeArray = [emojis.poop, emojis.poop, emojis.money];\n        this.view = new View(DOMElement);\n    }\n\n    init(){\n        this.setDoorPrizes();\n        this.view.render(this.doors);\n        this.selectFirstDoor();\n        window.safeToStart = false;\n    }\n\n    setDoorPrizes(){\n        this.view.closeAllDoors();\n        this.doors = this._shufflePrizes(this.prizeArray.slice());\n    }\n\n    _shufflePrizes(prizeArray){\n        var currentIndex = prizeArray.length;\n\t    var temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = prizeArray[currentIndex];\n            prizeArray[currentIndex] = prizeArray[randomIndex];\n            prizeArray[randomIndex] = temporaryValue;\n        }\n    return prizeArray;\n    }\n\n    // Game Play\n    selectFirstDoor(){\n        let randomIndex = Math.floor(Math.random() * this.doors.length);\n\n        this.firstDoorSelected = randomIndex;\n        this.view.highlightSelectedDoor(randomIndex);\n        this.selectSecondDoor();\n    }\n\n    selectSecondDoor(){\n        for(let i = 0; i < this.doors.length; i++){\n            if(i !== this.firstDoorSelected && this.doors[i] !== emojis.money){\n                this.view.openDoor(i)\n                this.doorShown = i;\n                setTimeout(() => {\n                    if(this.alwaysSwitch){\n                        this.switchDoors();\n                    } else {\n                        this.keepSelectedDoor();\n                    }\n                    \n                },1000);\n                return;\n            }\n        }\n    }\n\n    switchDoors(){\n        this.view.unhighlightAllDoors();\n        let doorOptions = [0,1,2];\n        doorOptions.splice(doorOptions.indexOf(this.firstDoorSelected),1);\n        doorOptions.splice(doorOptions.indexOf(this.doorShown),1);\n        this.finalDoorSelected = doorOptions[0];\n        this.view.highlightSelectedDoor(this.finalDoorSelected);\n\n        this.view.openDoor(this.finalDoorSelected);\n        setTimeout(() => {\n            this.checkWin();\n        },500);\n    }\n\n    keepSelectedDoor(){\n        this.finalDoorSelected = this.firstDoorSelected;\n        this.view.openDoor(this.finalDoorSelected);\n        setTimeout(() => {\n            this.checkWin();\n        },500);\n    }\n\n    checkWin(){\n        if(this.doors[this.finalDoorSelected] === emojis.money){\n            this.win();\n        }\n        else {\n            this.lose();\n        }\n    }\n\n    win(){\n        this.wins++;\n        this.view.updateWins(this.wins);\n        this.calculateWinRatio();\n        setTimeout(() => {\n            this.resetGame();\n        }, 600);\n    }\n\n    lose(){\n        this.loses++;\n        this.view.updateLoses(this.loses);\n        this.calculateWinRatio();\n        setTimeout(() => {\n            this.resetGame();\n        }, 600)\n    }\n\n    calculateWinRatio(){\n        let ratio = (this.wins / (this.wins + this.loses)) * 100;\n        this.view.updateRatio(ratio.toFixed(2));\n    }\n\n    resetGame(){\n        this.numOfGamesPlayed++;\n        this.view.unhighlightAllDoors();\n        this.firstDoorSelected = null;\n        this.finalDoorSelected = null;\n        this.doorShown = null;\n        this.setDoorPrizes();\n        this.view.render(this.doors);\n        if(this.numOfGamesPlayed < 100){\n            setTimeout(() => {\n                this.selectFirstDoor();\n            },500);\n        } else {\n            this.doors = [];\n            this.wins = 0;\n            this.loses = 0;\n            window.safeToStart = true;\n        }\n    }\n}\n\n\nwindow.onload = function(){\n    window.safeToStart = true;\n    const startGames = () =>{\n        if(safeToStart){\n            const gameAlwaysSwitch= new Game('game-always-switch', true);\n            const gameNeverSwitch= new Game('game-never-switch', false);\n            gameAlwaysSwitch.init();    \n            gameNeverSwitch.init(); \n        }\n        else {\n            alert('Game must finish before restarting.');\n        }\n    }\n\n    const btnStart = document.getElementById('start');\n    btnStart.addEventListener('click', () => {\n        startGames();\n    })\n}"]}